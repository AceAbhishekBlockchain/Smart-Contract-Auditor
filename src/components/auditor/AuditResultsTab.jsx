import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { PDFGenerator } from '@/components/PDFGenerator';
import { FileText, AlertTriangle, Cpu, BarChart2, PieChart } from 'lucide-react';
import SeverityDistributionChart from '@/components/charts/SeverityDistributionChart';
import ConfidenceScoreChart from '@/components/charts/ConfidenceScoreChart';

const AuditResultsTab = ({ auditResults, isLoading, auditSource }) => {
  const getSeverityColor = (severity) => {
    if (severity === 'High') return 'text-red-400';
    if (severity === 'Medium') return 'text-yellow-400';
    return 'text-green-400';
  };

  const generateReportContent = () => {
    if (!auditResults) return "No audit performed yet.";
    let content = `AI-POWERED SMART CONTRACT SECURITY AUDIT REPORT\n\n`;
    content += `Contract Source: ${auditSource === 'code' ? auditResults.fileName : auditResults.fileName}\n`;
    content += `Audit Timestamp: ${auditResults.timestamp}\n\n`;
    content += `OVERALL SUMMARY:\n${auditResults.summary}\n\n`;
    content += `DETECTED VULNERABILITIES (${auditResults.vulnerabilities.length}):\n`;
    auditResults.vulnerabilities.forEach(v => {
      content += `  - ID: ${v.id}\n`;
      content += `    Severity: ${v.severity}\n`;
      content += `    Type: ${v.type}\n`;
      if (auditSource === 'code') content += `    Line: ${v.line}\n`;
      content += `    Confidence: ${(v.confidence * 100).toFixed(0)}%\n`;
      content += `    Description: ${v.description}\n\n`;
    });
    content += `PREDICTED VULNERABILITIES (${auditResults.predictedVulnerabilities.length}):\n`;
     auditResults.predictedVulnerabilities.forEach(pv => {
      content += `  - Type: ${pv.type}\n`;
      content += `    Likelihood: ${pv.likelihood}\n`;
      content += `    Impact: ${pv.impact}\n`;
      content += `    Notes: ${pv.notes}\n\n`;
    });
    content += `RECOMMENDATIONS:\n`;
    auditResults.recommendations.forEach(r => {
      content += `  - ${r}\n`;
    });
    content += `\n\nDISCLAIMER: This report is generated by an AI model and should be used for informational purposes. Always perform manual audits and thorough testing.\n`;
    return content;
  };


  return (
    <Card className="bg-white/5 backdrop-blur-md border-white/10 shadow-xl">
      <CardHeader>
        <CardTitle className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-orange-500 flex items-center gap-2">
          <FileText size={28} /> Audit Results
        </CardTitle>
        {auditResults && (
          <CardDescription className="text-gray-300 text-lg">
            Report for: {auditResults.fileName} (Audited on: {auditResults.timestamp})
          </CardDescription>
        )}
      </CardHeader>
      <CardContent>
        {isLoading && <p className="text-center text-lg py-8 text-gray-300"> <Cpu size={24} className="inline mr-2 animate-spin" /> Performing AI Audit... This may take a moment.</p>}
        {!isLoading && !auditResults && <p className="text-center text-lg py-8 text-gray-400">No audit performed yet. Please select an audit method and start an audit.</p>}
        {auditResults && (
          <div className="space-y-8">
            <Card className="bg-slate-800/70 border-slate-700">
              <CardHeader><CardTitle className="text-xl text-yellow-300">Summary</CardTitle></CardHeader>
              <CardContent><p className="text-gray-200">{auditResults.summary}</p></CardContent>
            </Card>

            {auditResults.vulnerabilities.length > 0 && (
              <div className="grid md:grid-cols-2 gap-6">
                <SeverityDistributionChart vulnerabilities={auditResults.vulnerabilities} />
                <ConfidenceScoreChart vulnerabilities={auditResults.vulnerabilities} />
              </div>
            )}

            <div>
              <h3 className="text-2xl font-semibold mb-4 text-orange-300 flex items-center gap-2">
                <AlertTriangle size={24} /> Detected Vulnerabilities ({auditResults.vulnerabilities.length})
              </h3>
              {auditResults.vulnerabilities.length === 0 && <p className="text-gray-300 p-4 bg-slate-800/50 rounded-md">No direct vulnerabilities detected. Good job!</p>}
              <div className="space-y-4">
                {auditResults.vulnerabilities.map(vuln => (
                  <Card key={vuln.id} className="bg-slate-800/50 border-slate-700/70 hover:border-orange-500/50 transition-colors duration-300">
                    <CardHeader>
                      <CardTitle className={`text-lg ${getSeverityColor(vuln.severity)} flex items-center gap-2`}>
                        <AlertTriangle size={20} /> {vuln.type} ({vuln.severity} Severity)
                      </CardTitle>
                      <CardDescription className="text-gray-400">
                        {auditSource === 'code' && vuln.line !== 'N/A' ? `Line: ${vuln.line} | ` : ''}
                        Confidence: {(vuln.confidence * 100).toFixed(0)}%
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <p className="text-gray-300">{vuln.description}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
            
            <Card className="bg-slate-800/70 border-slate-700">
              <CardHeader><CardTitle className="text-xl text-green-300">Recommendations</CardTitle></CardHeader>
              <CardContent>
                <ul className="list-disc list-inside space-y-1 text-gray-200">
                  {auditResults.recommendations.map((rec, i) => <li key={i}>{rec}</li>)}
                </ul>
              </CardContent>
            </Card>

            <div className="flex justify-center pt-4">
              <PDFGenerator
                title={`Smart Contract Audit: ${auditResults.fileName}`}
                content={generateReportContent()}
                filename={`audit-report-${auditResults.fileName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`}
              />
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default AuditResultsTab;